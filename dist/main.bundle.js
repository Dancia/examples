!function(n){function e(e){for(var r,a,s=e[0],l=e[1],c=e[2],f=0,p=[];f<s.length;f++)a=s[f],o[a]&&p.push(o[a][0]),o[a]=0;for(r in l)Object.prototype.hasOwnProperty.call(l,r)&&(n[r]=l[r]);for(u&&u(e);p.length;)p.shift()();return i.push.apply(i,c||[]),t()}function t(){for(var n,e=0;e<i.length;e++){for(var t=i[e],r=!0,s=1;s<t.length;s++){var l=t[s];0!==o[l]&&(r=!1)}r&&(i.splice(e--,1),n=a(a.s=t[0]))}return n}var r={},o={1:0},i=[];function a(e){if(r[e])return r[e].exports;var t=r[e]={i:e,l:!1,exports:{}};return n[e].call(t.exports,t,t.exports,a),t.l=!0,t.exports}a.m=n,a.c=r,a.d=function(n,e,t){a.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:t})},a.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},a.t=function(n,e){if(1&e&&(n=a(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var t=Object.create(null);if(a.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var r in n)a.d(t,r,function(e){return n[e]}.bind(null,r));return t},a.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return a.d(e,"a",e),e},a.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},a.p="";var s=window.webpackJsonp=window.webpackJsonp||[],l=s.push.bind(s);s.push=e,s=s.slice();for(var c=0;c<s.length;c++)e(s[c]);var u=l;i.push([66,0]),t()}({12:function(n,e){n.exports=".image-example img {\n  max-width: 400px; }\n"},13:function(n,e,t){var r=t(12);"string"==typeof r&&(r=[[n.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};t(4)(r,o);r.locals&&(n.exports=r.locals)},5:function(n,e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.bytesToBase64=function(n){for(var e,t="",r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",o=new Uint8Array(n),i=o.byteLength,a=i%3,s=i-a,l=0;l<s;l+=3)t+=r[(16515072&(e=o[l]<<16|o[l+1]<<8|o[l+2]))>>18]+r[(258048&e)>>12]+r[(4032&e)>>6]+r[63&e];return 1==a?t+=r[(252&(e=o[s]))>>2]+r[(3&e)<<4]+"==":2==a&&(t+=r[(64512&(e=o[s]<<8|o[s+1]))>>10]+r[(1008&e)>>4]+r[(15&e)<<2]+"="),t}},50:function(n,e,t){"use strict";var r=this&&this.__extends||function(){var n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,e){n.__proto__=e}||function(n,e){for(var t in e)e.hasOwnProperty(t)&&(n[t]=e[t])};return function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}}(),o=this&&this.__awaiter||function(n,e,t,r){return new(t||(t=Promise))(function(o,i){function a(n){try{l(r.next(n))}catch(n){i(n)}}function s(n){try{l(r.throw(n))}catch(n){i(n)}}function l(n){n.done?o(n.value):new t(function(e){e(n.value)}).then(a,s)}l((r=r.apply(n,e||[])).next())})},i=this&&this.__generator||function(n,e){var t,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(t)throw new TypeError("Generator is already executing.");for(;a;)try{if(t=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=e.call(n,a)}catch(n){i=[6,n],r=0}finally{t=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(e,"__esModule",{value:!0});var a=t(0),s=t(7),l=t(41),c=t(5);t(6),t(13);var u=function(n){function e(){return null!==n&&n.apply(this,arguments)||this}return r(e,n),e.prototype.render=function(){return a.createElement(l,{url:this.props.url,modelColor:"#808080",cameraX:180})},e}(a.Component);e.run=function(n,e){return o(this,void 0,Promise,function(){var t,r;return i(this,function(o){switch(o.label){case 0:return console.info("Models example."),n.className="models-example",n.innerHTML='<div class="loader" />',[4,e.download({src:"ipfs:QmdHFsNXhMtWzBEH8SeEHhdLYWw4UZjUWPqdmDsccG4LbG"})];case 1:return t=o.sent(),console.info("Model downloaded ("+t.length+" bytes)"),r="application/sla",s.render(a.createElement(u,{url:"data:"+r+";base64,"+c.bytesToBase64(t)}),n),[2]}})})}},51:function(n,e){n.exports=".video-example video {\n  max-width: 400px; }\n"},52:function(n,e,t){var r=t(51);"string"==typeof r&&(r=[[n.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};t(4)(r,o);r.locals&&(n.exports=r.locals)},53:function(n,e,t){"use strict";var r=this&&this.__awaiter||function(n,e,t,r){return new(t||(t=Promise))(function(o,i){function a(n){try{l(r.next(n))}catch(n){i(n)}}function s(n){try{l(r.throw(n))}catch(n){i(n)}}function l(n){n.done?o(n.value):new t(function(e){e(n.value)}).then(a,s)}l((r=r.apply(n,e||[])).next())})},o=this&&this.__generator||function(n,e){var t,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(t)throw new TypeError("Generator is already executing.");for(;a;)try{if(t=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=e.call(n,a)}catch(n){i=[6,n],r=0}finally{t=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(e,"__esModule",{value:!0}),t(52);var i=t(5);e.run=function(n,e){return r(this,void 0,Promise,function(){var t,r;return o(this,function(o){switch(o.label){case 0:return console.info("Video example."),n.className="video-example",n.innerHTML='<div class="loader" />',[4,e.download({src:"ipfs:QmeynYjeMnWVXs4APAfr1GNRqUteAz3ABxYfBYGdstNvVB"})];case 1:return t=o.sent(),console.info("Video downloaded ("+t.length+" bytes)"),r="video/mp4",n.innerHTML='\n<video controls>\n    <source type="video/mp4" src="data:'+r+";base64,"+i.bytesToBase64(t)+'">\n</video>',[2]}})})}},54:function(n,e){n.exports=".image-example img {\n  max-width: 400px; }\n"},55:function(n,e,t){var r=t(54);"string"==typeof r&&(r=[[n.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};t(4)(r,o);r.locals&&(n.exports=r.locals)},56:function(n,e,t){"use strict";var r=this&&this.__awaiter||function(n,e,t,r){return new(t||(t=Promise))(function(o,i){function a(n){try{l(r.next(n))}catch(n){i(n)}}function s(n){try{l(r.throw(n))}catch(n){i(n)}}function l(n){n.done?o(n.value):new t(function(e){e(n.value)}).then(a,s)}l((r=r.apply(n,e||[])).next())})},o=this&&this.__generator||function(n,e){var t,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(t)throw new TypeError("Generator is already executing.");for(;a;)try{if(t=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=e.call(n,a)}catch(n){i=[6,n],r=0}finally{t=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(e,"__esModule",{value:!0}),t(6),t(55);var i=t(5);e.run=function(n,e){return r(this,void 0,Promise,function(){var t,r;return o(this,function(o){switch(o.label){case 0:return console.info("Image example."),n.className="image-example",n.innerHTML='<div class="loader" />',[4,e.download({src:"ipfs:QmeMHGKY3WWTt41EK5sntQVuPY8Wcq7R47KEE4jm4nNQTu"})];case 1:return t=o.sent(),console.info("Image downloaded ("+t.length+" bytes)"),r="image/jpeg",n.innerHTML='<img src="data:'+r+";base64,"+i.bytesToBase64(t)+'" />',[2]}})})}},59:function(n,e){n.exports='.loader {\n  position: relative;\n  box-sizing: border-box;\n  display: inline-block;\n  height: 32px;\n  width: 32px;\n  -webkit-animation: spinner-reveal 1.4s steps(1, end) infinite, spinner-rotation 1.4s ease-in-out infinite;\n          animation: spinner-reveal 1.4s steps(1, end) infinite, spinner-rotation 1.4s ease-in-out infinite;\n  -webkit-clip-path: inset(0 0 0 50%);\n          clip-path: inset(0 0 0 50%); }\n  .loader.big {\n    height: 64px;\n    width: 64px; }\n  .loader::before, .loader::after {\n    box-sizing: border-box;\n    content: "";\n    width: 100%;\n    height: 100%;\n    border: 2px solid #ffffff;\n    border-radius: 50%;\n    position: absolute;\n    top: 0;\n    left: 0;\n    -webkit-clip-path: inset(0 50% 0 0);\n            clip-path: inset(0 50% 0 0);\n    -webkit-animation: spinner-rotation-a 1.4s linear infinite;\n            animation: spinner-rotation-a 1.4s linear infinite;\n    transition: border-color 0.5s ease-out; }\n  .loader::after {\n    -webkit-animation-name: spinner-rotation-b;\n            animation-name: spinner-rotation-b; }\n\n/***\r\n   * Animations\r\n   */\n@-webkit-keyframes spinner-rotation {\n  100% {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg); } }\n@keyframes spinner-rotation {\n  100% {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg); } }\n\n@-webkit-keyframes spinner-rotation-a {\n  40%,\n  60% {\n    -webkit-transform: rotate(180deg);\n            transform: rotate(180deg); }\n  100% {\n    -webkit-transform: rotate(540deg);\n            transform: rotate(540deg); } }\n\n@keyframes spinner-rotation-a {\n  40%,\n  60% {\n    -webkit-transform: rotate(180deg);\n            transform: rotate(180deg); }\n  100% {\n    -webkit-transform: rotate(540deg);\n            transform: rotate(540deg); } }\n\n@-webkit-keyframes spinner-rotation-b {\n  40% {\n    -webkit-transform: rotate(180deg);\n            transform: rotate(180deg); }\n  80% {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg); }\n  100% {\n    -webkit-transform: rotate(540deg);\n            transform: rotate(540deg); } }\n\n@keyframes spinner-rotation-b {\n  40% {\n    -webkit-transform: rotate(180deg);\n            transform: rotate(180deg); }\n  80% {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg); }\n  100% {\n    -webkit-transform: rotate(540deg);\n            transform: rotate(540deg); } }\n\n@-webkit-keyframes spinner-reveal {\n  40% {\n    -webkit-clip-path: inset(0 0 0 0);\n            clip-path: inset(0 0 0 0); }\n  80% {\n    -webkit-clip-path: inset(0 50% 0 0);\n            clip-path: inset(0 50% 0 0); } }\n\n@keyframes spinner-reveal {\n  40% {\n    -webkit-clip-path: inset(0 0 0 0);\n            clip-path: inset(0 0 0 0); }\n  80% {\n    -webkit-clip-path: inset(0 50% 0 0);\n            clip-path: inset(0 50% 0 0); } }\n'},60:function(n,e,t){var r=t(59);"string"==typeof r&&(r=[[n.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};t(4)(r,o);r.locals&&(n.exports=r.locals)},61:function(n,e){n.exports='@import url("https://fonts.googleapis.com/css?family=Roboto");\nhtml {\n  height: 100%; }\n\nhtml,\nbody {\n  min-height: 100%; }\n\nbody {\n  background: #191c86;\n  display: flex;\n  flex-direction: column; }\n\n.example-container {\n  padding: 20px;\n  color: white;\n  font-family: "Roboto", sans-serif; }\n  .example-container h2 {\n    padding-bottom: 20px; }\n'},62:function(n,e,t){var r=t(61);"string"==typeof r&&(r=[[n.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};t(4)(r,o);r.locals&&(n.exports=r.locals)},64:function(n,e){n.exports="/* http://meyerweb.com/eric/tools/css/reset/ \r\n   v2.0 | 20110126\r\n   License: none (public domain)\r\n*/\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline; }\n\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, menu, nav, section {\n  display: block; }\n\nbody {\n  line-height: 1; }\n\nol, ul {\n  list-style: none; }\n\nblockquote, q {\n  quotes: none; }\n\nblockquote:before, blockquote:after,\nq:before, q:after {\n  content: '';\n  content: none; }\n\ntable {\n  border-collapse: collapse;\n  border-spacing: 0; }\n\n* {\n  box-sizing: border-box; }\n"},65:function(n,e,t){var r=t(64);"string"==typeof r&&(r=[[n.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};t(4)(r,o);r.locals&&(n.exports=r.locals)},66:function(n,e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),t(65),t(62),t(60),t(6);var r=t(58),o=t(57),i=t(56),a=t(53),s=t(50);function l(n,e){var t=document.getElementById("root"),r=document.createElement("div");r.id=n,r.className="example-container",r.innerHTML="<h2>"+e+"</h2>";var o=document.createElement("div");return r.appendChild(o),t.appendChild(r),o}e.createExampleContainer=l;var c=new r.NoiaClient(function(){return new o});document.addEventListener("DOMContentLoaded",function(){i.run(l("image","Image example"),c),a.run(l("video","Video example"),c),s.run(l("models","Models example"),c)})}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,